#
# START Error detection user settings section---------------------------------------------------
#
[error_detection]
#
# This section should only be used if you want fine tuned
# control when errors are detected in the original recorded video file.
# Actions include an outright abort of the script or simply add comments to the
# job queue when specific thresholds are met. Depending on what options are
# used automatically override any remove or replace the original recording.
#
# In most cases users do not need to touch this section.
#
# NOTE: If you activate these variables you MUST also add the "-j %%JOBID%%"
#       option to your lossless_cut userjob(s). For example:
#
#   User Job description: LL Cut to MythVideo
#   User Job command: /usr/bin/lossless_cut -f "%%DIR%%/%%FILE%%" -e -j %%JOBID%%
#
# NOTE: If your bash command requires a ";" charcater you must change each
#       ";" to a "\;" character combination as a single ";" is reserved in a
#       python configuration file as a in-line comment
# NOTE: If the #3 bash command must contain
#       a "," comma then make the bash command into a shell script and
#       replace the bash command with the path to the executable shell
#       script. For example "/my error/script.sh"
#
# These settings work differently depending on which of the following options are
# chosen "-r" replace, "-e" export, "-m" move and all configuration settings from
# the "remove_recorded" configuration section.
#
# There are two type of actions:
#   An "alert" or "abort", both are triggered when a specific threshold
#   number of errors are returned on STDOUT by a bash command.
#
# Depending on the other options the following will occur:
#   1) For an "alert" rule:
#      a) With "-e" export or "-m" move but NO "remove_recorded" match then:
#         The lossless cut mkv file will be created and an alert message will
#         be added to the job queue comments and the job_queue status will be
#         set to errored.
#      b) With "-e" export or "-m" move but a "remove_recorded" match then:
#         The lossless cut mkv file will be created, the alert message will
#         be added to the job queue comments and the job_queue status will be
#         set to aborted. NO removal of the original recording will occur.
#      c) With "-r" replace:
#         The mkv video file will be created and left in the same storage
#         group as the original recording BUT a replace action will NOT
#         occur. The alert message will be added to the job queue comments
#         and the job_queue status will be set to aborted.
#   2) For an "abort" rule:
#      No matter what options are specified the MKV video file will not be
#      created and no replace or removal will occur. The abort message
#      will be added to the job queue comments and the job_queue status
#      will be set to aborted.
#
# Here is an example scenario for the "error_detection" variables:
#   Your userjob specifies the "-r" replace option but occasionally has
#   recordings which mkvmerge detects as having GOP errors. Most of the time the
#   resulting lossless cut MKV file is useless. You want to be warned when
#   a specific number of GOP errors have been detected but still would like to
#   try the MKV file. When the GOP errors are excessive you do
#   not want to have the MKV created. In both cases you do NOT want
#   the original recording replaced.
#
#   To cover this situation you would need two configuration variables.
#     error_detection_01=alert, 30, cat "%%(logfile)s" | grep -c "GOP", %%(error_cnt)s GOP errors detected
#     error_detection_02=abort, 99, cat "%%(logfile)s" | grep -c "GOP", Excessive number "%%(error_cnt)s" of GOP errors
#
# You can use any of these four dynamic variables:
#   %%(recordedfile)s - The MythTV recorded absolute path and filename
#   %%(base_name)s    - The MythTV recorded filename (no path)
#   %%(logfile)s      - The Lossless Cut log file for this userjob
#   %%(error_cnt)s    - The number of errors that were returned by the bash command
#
# The configuration variable is made up of the initial
# "error_detection_XX=" or "error_detection_XX:" with a sequence number to
# make the variable unique but without the quotes. Followed by
# four comma separated strings in the following order:
#   1) "alert" or "abort" without the quotes. This denotes the type of error.
#   2) The threshold integer value which when reached will trigger the actions
#      described above.
#   3) The bash command(s) or executable path and file name
#      which will return nothing OR an integer value that will be
#      compared against the #2 threshold value. When nothing is
#      returned it is treated as a zero "0".
#   4) The JobQueue comment string limited to 128 characters or if it exceeds
#      that limit will be automatically truncated.
# NOTE: If either the #3 bash command or #4 JobQueue comment must contain
#       a ";" semicolon change those instances to a "\;" character combination.
#       Just like in the example above.
# NOTE: If the #3 bash command must contain a "," comma
#       then make the bash command into a shell script and
#       replace the bash command with the path to the executable shell
#       script. For example "/my error/script.sh"
# NOTE: Be aware that the bash command or executable, is run only
#       after the mkvmerge merge step which is after the cut step. This has
#       to be in that order so that all the conditions described above can
#       be supported. Proper file clean up will occur.
#
# You can have any number of these error_detection_XX variables but each must
# have a unique name. Use sequence numbers for make the variable name unique.
# By default none are active.
#
#error_detection_01=
#
# END Error detection user settings section--------------------------------------------------------------------
